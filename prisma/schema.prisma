generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  INVITED
  INCOMPLETE
  COMPLETE
}

enum UserRole {
  ADMIN
  BASIC
}

enum TaskPriority {
  NONE
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
  DUPLICATE
  BACKLOG
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ActivityType {
  TASK_UPDATE
  USER_COMMENT
}

model Workspace {
  id          String          @id @default(uuid())
  name        String
  urlSlug     String          @unique
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  projects    Project[]
  teamspaces  teamspace[]
  members     UserWorkspace[]
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  activity       Activity[]
  profilePicture String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastLogin      DateTime?
  status         UserStatus      @default(INCOMPLETE)
  teamspaces     Userteamspace[]
  workspaces     UserWorkspace[]
  assignedTasks  Task[]          @relation("UserTasks")
}

model UserWorkspace {
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userName    String
  role        UserRole  @default(ADMIN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, workspaceId])
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  tasks       Task[]
}

model Task {
  id           String        @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus?
  priority     TaskPriority?
  assignedTo   String?
  assignedUser User?         @relation(fields: [assignedTo], references: [id], name: "UserTasks")
  dueDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  teamspaceId  String
  teamspace    teamspace     @relation(fields: [teamspaceId], references: [id])
  projectId    String?
  Activity     Activity[]
  project      Project?      @relation(fields: [projectId], references: [id])
}

model teamspace {
  id          String          @id @default(uuid())
  name        String
  acronym     String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  workspaceId String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])
  tasks       Task[]
  members     Userteamspace[]
}

model Userteamspace {
  userId      String
  teamspaceId String
  role        UserRole
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  teamspace   teamspace @relation(fields: [teamspaceId], references: [id])

  @@id([userId, teamspaceId])
}

model Activity {
  id        String       @id @default(uuid())
  content   String
  type      ActivityType
  taskId    String
  task      Task         @relation(fields: [taskId], references: [id])
  createdBy String?
  user      User?        @relation(fields: [createdBy], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([taskId])
}
